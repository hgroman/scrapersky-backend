"""
Pydantic Schemas for SitemapFile Model
"""

import uuid
from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel, Field

# Import the Renamed Enum from the model to reuse it
from ..models.sitemap import SitemapFileStatusEnum, SitemapImportCurationStatusEnum


# Base Schema: Fields common to Create and Read
class SitemapFileBase(BaseModel):
    domain_id: uuid.UUID
    # Use alias to map 'url' from model to 'sitemap_url' in schema
    url: str = Field(
        ..., alias="sitemap_url", examples=["https://example.com/sitemap.xml"]
    )
    status: SitemapFileStatusEnum = Field(default=SitemapFileStatusEnum.Pending)
    file_path: Optional[str] = None
    error_message: Optional[str] = None
    processing_time: Optional[float] = None
    url_count: Optional[int] = Field(default=0)

    # Allow ORM mode for direct mapping from SQLAlchemy models
    class Config:
        from_attributes = True
        populate_by_name = True


# Schema for Creating a new SitemapFile (inherits from Base)
# Fields required when creating via API
class SitemapFileCreate(SitemapFileBase):
    # created_by will likely be set automatically based on the authenticated user
    # If the API allows specifying it during creation, add it here:
    # created_by: Optional[uuid.UUID] = None
    pass  # Inherits all needed fields from Base for creation


# Schema for Updating an existing SitemapFile (all fields optional)
class SitemapFileUpdate(BaseModel):
    domain_id: Optional[uuid.UUID] = None
    # Use alias for update as well
    url: Optional[str] = Field(None, alias="sitemap_url")
    status: Optional[SitemapFileStatusEnum] = None
    file_path: Optional[str] = None
    error_message: Optional[str] = None
    processing_time: Optional[float] = None
    url_count: Optional[int] = None
    # Use renamed Enum
    deep_scrape_curation_status: Optional[SitemapImportCurationStatusEnum] = None
    # updated_by will likely be set automatically
    # If API allows manual update, add: updated_by: Optional[uuid.UUID] = None

    # Allow ORM mode for direct mapping from SQLAlchemy models
    class Config:
        from_attributes = True
        populate_by_name = True


# Schema for Reading/Returning a SitemapFile (includes fields generated by DB/BaseModel)
class SitemapFileRead(SitemapFileBase):
    id: uuid.UUID  # Inherited from BaseModel
    created_at: datetime  # Inherited from BaseModel
    updated_at: datetime  # Inherited from BaseModel
    created_by: Optional[uuid.UUID] = None  # Include if set in model
    updated_by: Optional[uuid.UUID] = None  # Include if set in model
    # Use renamed Enum
    deep_scrape_curation_status: Optional[SitemapImportCurationStatusEnum] = None
    domain_name: Optional[str] = None  # Added field for domain name


# Schema for Paginated Response (common pattern)
class PaginatedSitemapFileResponse(BaseModel):
    items: List[SitemapFileRead]
    total: int
    page: int
    size: int
    pages: int


# Schema for Batch Update operations (example: updating status)
class SitemapFileBatchUpdate(BaseModel):
    sitemap_file_ids: List[uuid.UUID]
    # Use renamed Enum
    deep_scrape_curation_status: SitemapImportCurationStatusEnum

    class Config:
        # REMOVED use_enum_values = True
        pass
