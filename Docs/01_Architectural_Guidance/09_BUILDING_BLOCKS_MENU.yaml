# Building Blocks AI Discovery Menu
# Version: 2.4
# Purpose: AI-native, machine-readable database of battle-tested code patterns.
# Usage: Parse this file to programmatically access correct code templates.

meta:
  catalog_source: "This file is the primary source. Human-readable guides are in /developer_guides/"
  last_updated: "2025-09-13"
  ai_instruction: "Parse this file at the start of any task. Use the 'building_blocks' section to retrieve code templates. The legacy 'triggers' are for context only."

# ==============================================================================
# === V2: BATTLE-TESTED BUILDING BLOCKS (MACHINE-READABLE) =====================
# ==============================================================================
# This section is the single source of truth for implementation code.
# It is designed to be parsed and used directly by AI partners.

building_blocks:
  database:
    # ... (sqlalchemy_enum_column content as before)

  external_integrations:
    # ... (safe_library_access content as before)

  service_layer:
    # ... (value_driven_service_return content as before)

  api:
    # ... (fastapi_health_check content as before)

  architecture:
    clean_deprecation:
      name: "Clean Legacy System Deprecation Pattern"
      description: "The mandatory process for replacing a legacy system with a new one to avoid parallel conflicting workflows."
      template: |
        # === BATTLE-TESTED DEPRECATION PROCESS TEMPLATE ===
        # MANDATORY: Follow this process when replacing any major component or system.
        # WHY: See War Story - WAR_STORY__Dual_Sitemap_Pipeline_Conflict_RCA__2025-09-09.md

        # 1. IDENTIFY LEGACY COMPONENTS:
        # - List all files, schedulers, and database tables associated with the old system.
        # - Example Legacy System A:
        #   - src/services/sitemap_scheduler.py
        #   - src/services/sitemap/processing_service.py

        # 2. DISABLE LEGACY ENTRY POINTS:
        # - Comment out the scheduler job for the legacy system.
        # - In the main application startup, remove the legacy service initialization.
        # - Add a prominent `@deprecated` notice to the legacy service files.
        #   - logger.warning("Legacy system called! This should be disabled.")

        # 3. INTRODUCE NEW SYSTEM:
        # - Add the new components (e.g., new sitemap_import_service.py logic).
        # - Ensure the new system uses distinct status fields if necessary to avoid state collision.

        # 4. CREATE A DEPRECATION PR:
        # - The commit message MUST clearly state which system is being deprecated and which is replacing it.
        # - The PR must include the disabling of the old system and the enabling of the new one.

        # 5. POST-DEPLOYMENT MONITORING:
        # - Monitor logs for any warnings from the deprecated legacy system.
        # - After a safe period (e.g., 1-2 sprints), create a follow-up ticket to permanently delete the old code.
      docs_link: null
      war_story_link: "/Docs/01_Architectural_Guidance/war_stories/WAR_STORY__Dual_Sitemap_Pipeline_Conflict_RCA__2025-09-09.md"

# ==============================================================================
# === V1: LEGACY TRIGGER-BASED SYSTEM (FOR HISTORICAL CONTEXT ONLY) ============
# ==============================================================================
# ... (legacy triggers as before)
