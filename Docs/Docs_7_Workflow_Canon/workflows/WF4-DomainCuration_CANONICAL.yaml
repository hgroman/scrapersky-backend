workflow_name: WF-04 Domain Curation to Sitemap Analysis
date_reviewed: 2025-05-05
reviewed_by: Cascade AI

# Dependencies section with standardized format
depends_on_models:
  - name: Domain
    file_path: src/models/domain.py
    table: domains
    description: Primary model for domain curation and sitemap analysis status tracking
    fields:
      - id: UUID
      - domain: String
      - sitemap_curation_status: SitemapCurationStatusEnum
      - sitemap_analysis_status: SitemapAnalysisStatusEnum
      - sitemap_analysis_error: String
      - updated_at: DateTime
  - name: LocalBusiness
    file_path: src/models/local_business.py
    table: local_businesses
    description: Source model containing business data with domain extraction status
  - name: DomainBatchCurationStatusUpdateRequest
    file_path: src/models/api_models.py
    description: API model for batch updates to domain curation status
    fields:
      - domain_ids: List[UUID4]
      - sitemap_curation_status: SitemapCurationStatusApiEnum

depends_on_enums:
  - name: SitemapCurationStatusEnum
    file_path: src/models/domain.py  # Enum is defined directly in the domain.py model file
    values: [New, Selected, Maybe, Not_a_Fit, Archived]
    description: Status values for the domain curation process
  - name: SitemapAnalysisStatusEnum
    file_path: src/models/domain.py  # Enum is defined directly in the domain.py model file
    values: [Queued, Processing, Completed, Error]
    description: Status values for the sitemap analysis process
  - name: SitemapCurationStatusApiEnum
    file_path: src/models/api_models.py  # Correct location for API models
    values: [New, Selected, Maybe, Not_a_Fit, Archived]
    description: API enum for validating sitemap curation status updates

# Architectural References
arch_references:
  - doc: /Docs_1_AI_GUIDES/01-ABSOLUTE_ORM_REQUIREMENT.md
    description: Mandates ORM usage for all DB operations
  - doc: /Docs_1_AI_GUIDES/02-JWT_AUTH_BOUNDARY.md
    description: JWT authentication happens only at API gateway endpoints
  - doc: /Docs_1_AI_GUIDES/03-ROUTER_TRANSACTION_BOUNDARY.md
    description: Routers own transaction boundaries

phases:
  - phase: UI Interaction
    steps:
      - step_id: 1.1
        file: static/scraper-sky-mvp.html [NOVEL]
        action: Contains Domain Curation tab HTML structure with status dropdown and update button
        principles:
          API Std: true
          Clear User Feedback: true
        notes: "HTML structure verified - contains table, checkboxes, dropdown, and update button"
      - step_id: 1.2
        file: static/js/domain-curation-tab.js [NOVEL]
        action: User selects rows, sets sitemap_curation_status="Selected", clicks "Update X Selected"
        principles:
          API Std: true
          Clear User Feedback: true
        notes: "JS sends PUT request to /api/v3/domains/sitemap-curation/status with domain_ids and status"

  - phase: API Routing
    steps:
      - step_id: 2.1
        file: src/routers/domains.py [NOVEL]
        action: Endpoint PUT /api/v3/domains/sitemap-curation/status receives request, validates
        principles:
          API Std: true # Uses v3 prefix as required
          Auth Boundary: true # Uses get_current_user dependency
          Conn Mgmt: true # Uses get_db_session dependency
          Txn Boundary: false # Covered in later step
          Code Org: true
          UUID Std: true # Proper UUID handling in DomainBatchCurationStatusUpdateRequest
          Enum Handling: true # Maps API enum to DB enum
        notes: "Router follows proper API standards and authentication patterns"
      - step_id: 2.2
        file: src/routers/domains.py [NOVEL]
        action: Maps API enum to DB enum, validates, fetches Domain objects
        principles:
          Enum Handling: true # Uses API status.name for reliable mapping
          Code Org: true # Proper error handling for KeyError
          Txn Boundary: false # Covered in later step
        notes: "Proper enum mapping using SitemapCurationStatusEnum[api_status.name]"
  
  - phase: Database Interaction
    steps:
      - step_id: 3.1
        file: src/routers/domains.py [NOVEL]
        action: Updates domain.sitemap_curation_status=Selected
        principles:
          ORM Req: true # Uses SQLAlchemy ORM objects
          Models: true # Domain model used correctly
          Enums: true # Proper enum usage
          UUIDs: true # Correct UUID handling
        notes: "All database updates use proper ORM with domain models"
      - step_id: 3.2
        file: src/routers/domains.py [NOVEL]
        action: Implements Dual-Status update logic - if status is 'Selected', sets sitemap_analysis_status='Queued'
        principles:
          ORM Req: true # Uses SQLAlchemy ORM
          Txn Boundary: false # Covered in later step
          Atomicity: true # Both updates in same transaction
        notes: "Implements Dual-Status Update Pattern consistently with other workflows"
      - step_id: 3.3
        file: src/routers/domains.py [NOVEL]
        action: Commits transaction
        principles:
          Txn Boundary: true # Explicit await session.commit()
          Error Handling: true # try/except with rollback
        notes: "Proper transaction management with explicit commit and rollback"

  - phase: Background Task Triggering
    steps:
      - step_id: 4.1
        file: src/routers/domains.py [NOVEL]
        action: Setting sitemap_analysis_status = 'Queued' acts as trigger
        principles:
          Decoupling: true # No direct function call
          Atomicity: true # Status update in same transaction
        notes: "Status-based queuing pattern consistent with other workflows"

  - phase: Background Task Execution
    steps:
      - step_id: 5.1
        file: src/services/domain_sitemap_submission_scheduler.py [NOVEL]
        action: Polls DB for Domains with sitemap_analysis_status='Queued'
        principles:
          Bg Task Pattern: true # Proper scheduler setup
          Conn Mgmt: true # Uses get_background_session
          Txn Boundary: true # Per-domain transactions
          ORM Req: true # Proper ORM usage
          Code Org: true # Clear structure
          Error Handling: true # try/except with logging
        notes: "Well-structured background job with proper transaction boundaries"
      - step_id: 5.2
        file: src/services/domain_to_sitemap_adapter_service.py [NOVEL]
        action: Submits domain to sitemap analysis API
        principles:
          Bg Task Pattern: true # Called by scheduler
          Txn Boundary: true # Transaction managed by caller
          ORM Req: true # Proper ORM usage
          Error Handling: true # Comprehensive error handling
        notes: "Well-implemented adapter pattern to legacy sitemap API"
      - step_id: 5.3
        file: src/services/domain_sitemap_submission_scheduler.py [NOVEL]
        action: Updates domain.sitemap_analysis_status based on submission result
        principles:
          ORM Req: true # Proper ORM updates
          Txn Boundary: true # Per-domain transaction commit
        notes: "Proper status updates with transaction management"

# Workflow connections with other workflows
workflow_connections:
  as_producer:
    - consumer_workflow: WF5-SitemapCuration
      # Database table that this workflow writes to for the next workflow (MANDATORY)
      interface_table: domains  # Explicit table name from database schema
      # Field that contains the status signal for the next workflow
      handoff_field: sitemap_analysis_status
      # Value that signals readiness for the next workflow
      produced_value: SitemapAnalysisStatusEnum.Queued
      connection_details: |
        WF4 produces records in the domains table with sitemap_analysis_status = "Queued" that 
        are then consumed by WF5-SitemapCuration. The workflow emits this signal by updating the 
        sitemap_analysis_status field in the domains table to "Queued".
      connection_source_file: src/routers/domains.py
      connection_source_function: update_domains_batch_status
      connection_target_file: src/services/domain_sitemap_submission_scheduler.py
      connection_target_function: process_pending_sitemap_submissions
      # Explicit database operation that updates the status field
      production_operation: "UPDATE domains SET sitemap_analysis_status = 'queued', sitemap_analysis_error = NULL WHERE id IN (...)"
  
  as_consumer:
    - producer_workflow: WF3-LocalBusinessCuration
      # Database table that this workflow consumes data from (MANDATORY)
      interface_table: local_businesses  # Explicit table name from database schema
      # Field that contains the status signal this workflow looks for
      handoff_field: domain_extraction_status
      # Value that triggers consumption
      consumed_value: DomainExtractionStatusEnum.Queued
      connection_details: |
        WF4 consumes records from the local_businesses table when records have domain_extraction_status = "Queued".
        The sitemap_scheduler polls these records and triggers the domain extraction process which 
        creates or updates domain records in the database.
      connection_source_file: src/routers/local_businesses.py
      connection_source_function: update_local_businesses_status_batch
      connection_target_file: src/services/sitemap_scheduler.py
      connection_target_function: process_pending_jobs
      # Explicit database operation that reads from the producer table
      consumption_query: "SELECT * FROM local_businesses WHERE domain_extraction_status = 'queued' ORDER BY updated_at LIMIT 10"

# Compliance Verification
verification:
  api_versioning:
    compliant: true
    reason: "All endpoints use /api/v3/ prefix as required"
  orm_usage:
    compliant: true
    reason: "All database operations use SQLAlchemy ORM"
  transaction_boundaries:
    compliant: true
    reason: "Router owns transaction boundaries with explicit commit/rollback"
  jwt_auth_boundary:
    compliant: true
    reason: "Authentication happens only at API gateway with get_current_user dependency"
  background_job_patterns:
    compliant: true
    reason: "Scheduler implements proper error handling, retry logic, and transaction boundaries"

# Known Issues
known_issues:
  - issue: Direct API call to internal endpoint
    severity: LOW
    remediation: "Consider moving from direct API call to service-to-service communication"
    jira: "SCRSKY-232"
  - issue: Hardcoded internal API URL
    severity: LOW 
    remediation: "Move INTERNAL_API_BASE_URL to configuration settings"
    jira: "SCRSKY-233"
