workflow_name: WF-01 Single Search Discovery

description: >
  User initiates a business discovery search from the UI. The backend creates a job, processes the search via Google Maps API, and stores results. Status is tracked via PlaceSearch and Place (Layer 1: Models & ENUMs).
depends_on_models:
  - name: PlaceSearch
    file_path: src/models/place_search.py
    table: place_searches
  - name: Place
    file_path: src/models/place.py
    table: places
depends_on_enums:
  - name: PlaceStatusEnum
    file_path: src/models/place.py  # Enum is defined directly in the place.py model file
    values: [New, Selected, Rejected, Processed]
architecture_reference: ../1-main_routers.md
last_reviewed: 2025-05-05T07:58:10-07:00
reviewed_by: Cascade AI

# Workflow connections with other workflows
workflow_connections:
  as_producer:
    - consumer_workflow: WF2-StagingEditor
      # Database table that this workflow writes to for the next workflow (MANDATORY)
      interface_table: places  # Explicit table in DB schema
      # Field that contains the status signal for the next workflow
      handoff_field: status
      # Value that signals readiness for the next workflow
      produced_value: PlaceStatusEnum.New
      connection_details: |
        WF1 produces place records in the places table with status="New" that are then consumed by
        WF2-StagingEditor. The workflow writes these records through the Layer 4: PlacesService, which
        creates entries with the PlaceStatusEnum.New status.
      connection_source_file: src/services/places_service.py
      connection_source_function: create_place_from_search
      connection_target_file: src/routers/places_staging.py
      connection_target_function: get_places
      # Explicit database operation that inserts into the places table
      production_operation: "INSERT INTO places (id, name, status, ...) VALUES (...)"

  # WF1 is the first workflow in the chain, so it has no upstream consumer

phases:
  - phase: UI Interaction
    steps:
      - step_id: 1.1
        file: static/js/single-search-tab.js # Represents Layer 6: UI Components
        action: User enters query/location, clicks "Search"
        principles:
          API_Standardization: true
          Clear_User_Feedback: true
        guides:
          - ../Docs_1_AI_GUIDES/15-API_STANDARDIZATION_GUIDE.md
        notes: "Verify JS details"

  - phase: API Routing
    steps:
      - step_id: 1.2
        file: src/routers/google_maps_api.py # Represents Layer 3: Routers
        action: JWT authentication is performed on the incoming request using src/auth/jwt_auth.py (no tenant isolation; user identity only)
        principles:
          Authentication_Boundary: true
          No_Tenant_Isolation: true
        guides:
          - ../Docs_1_AI_GUIDES/11-AUTHENTICATION_BOUNDARY.md
        notes: "JWT logic (token validation, user extraction) lives in src/auth/jwt_auth.py. The Layer 3: Router imports and uses this logic to enforce authentication and extract user_id. Do not use tenant_id."
      - step_id: 1.3
        file: src/routers/google_maps_api.py # Represents Layer 3: Routers
        action: Endpoint POST /api/v3/localminer-discoveryscan/search/places receives request, validates input (Layer 2: Schemas), checks ENUMs (Layer 1: Models & ENUMs)
        principles:
          API_Standardization: true
          Enum_Handling: true
          Conn_Mgmt: true
          Txn_Boundary: true
          Code_Organization: true
          UUID_Standard: true
        guides:
          - ../Docs_1_AI_GUIDES/15-API_STANDARDIZATION_GUIDE.md
        notes: "ENUMs (Layer 1: Models & ENUMs) are defined in src/models/enums.py and must be validated here if present in request. Validation helpers may be leveraged from src/services/core/validation_service.py (Layer 4: Services)."
      - step_id: 1.4
        file: src/routers/google_maps_api.py # Represents Layer 3: Routers
        action: Router delegates business logic to PlacesSearchService (Layer 4: Services)
        principles:
          Delegation: true
          Code_Organization: true
        notes: "No business logic in the Layer 3: Router; all heavy lifting is in the Layer 4: Service layer."

  - phase: Service Delegation & Logic
    steps:
      - step_id: 1.5
        file: src/services/places/places_search_service.py # Represents Layer 4: Services
        action: Handles ENUM validation (Layer 1: Models & ENUMs), input validation (Layer 2: Schemas), data cleansing, error handling, orchestrates downstream storage
        principles:
          Validation: true
          Enum_Handling: true
          Error_Handling: true
          Code_Organization: true
          ORM_Required: true
        guides:
          - ../Docs_1_AI_GUIDES/01-ABSOLUTE_ORM_REQUIREMENT.md
        notes: "All business logic, validation, and error handling are centralized here. ENUMs (Layer 1: Models & ENUMs) are validated before DB interaction. ORM Layer 1: Models & ENUMs are used for all DB access. Validation logic and helpers may be imported from src/services/core/validation_service.py (Layer 4: Services), database helpers from src/utils/db_helpers.py."
      - step_id: 1.7
        file: src/services/places/places_search_service.py # Represents Layer 4: Services
        action: Handles all exceptions and updates PlaceSearch job status to \'failed\' on error; logs errors.
        principles:
          Error_Handling: true
          Code_Organization: true
        guides:
          - (Guide missing)
        notes: "All error handling follows the project error handling conventions. (Guide reference pending: Docs_1_AI_GUIDES/22-ERROR_HANDLING_GUIDE.md does not exist.)"

  - phase: Database Interaction
    steps:
      - step_id: 1.6
        file: src/services/places/places_storage_service.py # Represents Layer 4: Services (storage specific)
        action: Stores places and search results in DB using ORM Layer 1: Models & ENUMs. ALL storage logic is performed using SQLAlchemy ORM only. Raw SQL is absolutely prohibited.
        principles:
          ORM_Required: true
          Error_Handling: true
          Code_Organization: true
        guides:
          - ../Docs_1_AI_GUIDES/01-ABSOLUTE_ORM_REQUIREMENT.md
        notes: "All DB inserts/updates use ORM Layer 1: Models & ENUMs defined in src/models/api_models.py and src/models/place.py. Handles batch operations and error logging. This step strictly enforces the architectural rule described in the Absolute ORM Requirement guide."
      - step_id: 1.8
        file: src/models/place_search.py, src/models/place.py # Represents Layer 1: Models & ENUMs
        action: Defines SQLAlchemy Layer 1: Models & ENUMs for PlaceSearch (search job) and Place (place result)
        principles:
          ORM_Required: true
          Code_Organization: true
        guides:
          - ../Docs_1_AI_GUIDES/01-ABSOLUTE_ORM_REQUIREMENT.md
        notes: "Layer 1: Models & ENUMs must use SQLAlchemy ORM and match DB schema. Layer 1: Models & ENUMs for status are defined in src/models/place.py."
      - step_id: 1.9
        file: src/models/place.py, src/models/api_models.py # Represents Layer 1: Models & ENUMs
        action: All status fields for Place and PlaceSearch must use the defined Enum classes (PlaceStatusEnum, PlaceStagingStatusEnum) (Layer 1: Models & ENUMs)
        principles:
          Enum_Handling: true
          Validation: true
          Code_Organization: true
        guides:
          - (Guide missing)
        notes: "Enum validation is performed in Layer 3: Routers/Layer 4: Services. (Guide reference pending: Docs_1_AI_GUIDES/20-ENUM_HANDLING_GUIDE.md does not exist.)"

  - phase: Configuration
    steps:
      - step_id: 1.10
        file: .env, docker-compose.yml # Represents Layer 5: Configuration
        action: Stores GOOGLE_MAPS_API_KEY used by PlacesService (Layer 4: Services)
        principles:
          Secure_Configuration: true
          Code_Organization: true
        notes: "Never hardcode API keys."

# Synchronization & ORM Enforcement Summary (2025-05-05T07:58:10-07:00)
# - All steps, files, and principles are in 1:1 sync with WF1-SingleSearch_linear_steps.md.
# - All DB interactions in this workflow use SQLAlchemy ORM (Layer 1: Models & ENUMs) only. No raw SQL is present.
# - See guides for architectural mandates.

# Known issues or limitations with clear actionable TODOs
known_issues:
  - id: "KI1"
    description: "Raw SQL query used in places_storage_service.py (Layer 4: Services)"
    severity: "HIGH"
    ticket: "SCRSKY-225"
    target_date: "2025-05-10"
    workaround: "Manually construct query using SQLAlchemy ORM (Layer 1: Models & ENUMs)"
    actionable_todo: "Replace raw SQL query with SQLAlchemy ORM (Layer 1: Models & ENUMs) in store_places method"
    files_to_modify:
      - "src/services/places/places_storage_service.py"

  - id: "KI2"
    description: "Hardcoded connection parameters in places_service.py (Layer 4: Services)"
    severity: "MEDIUM"
    ticket: "SCRSKY-226"
    target_date: "2025-05-15"
    workaround: "Parameters work but are not configurable"
    actionable_todo: "Move connection parameters to Layer 5: Configuration (settings.py) and update references"
    files_to_modify:
      - "src/services/places/places_service.py"
      - "src/config/settings.py"

  - id: "KI3"
    description: "Missing transaction boundary in API Layer 3: Router"
    severity: "MEDIUM"
    ticket: "SCRSKY-250"
    target_date: "2025-05-15"
    workaround: "Transaction implicitly created by session.add"
    actionable_todo: "Add explicit transaction boundary using \'async with session.begin()\' in Layer 3: Router"
    files_to_modify:
      - "src/routers/google_maps_api.py"

  - id: "KI4"
    description: "Missing error handling for API failures"
    severity: "MEDIUM"
    ticket: "SCRSKY-251"
    target_date: "2025-05-18"
    workaround: "Generic exception handler catches errors but provides limited information"
    actionable_todo: "Add specific error handling for Google Maps API failures with proper status codes in Layer 4: Services"
    files_to_modify:
      - "src/services/places/places_service.py"

# Documentation TODOs
documentation_todos:
  - id: "DT1"
    description: "Update workflow diagram to show WF1→WF2 connection"
    ticket: "SCRSKY-252"
    target_date: "2025-05-12"
    files_to_modify:
      - "/Docs/Docs_4_Architecture/workflow-diagrams.md"

  - id: "DT2"
    description: "Create error handling guide referenced in WF1 documentation"
    ticket: "SCRSKY-253"
    target_date: "2025-05-15"
    files_to_modify:
      - "/Docs/Docs_1_AI_GUIDES/22-ERROR_HANDLING_GUIDE.md"

  - id: "DT3"
    description: "Create ENUM handling guide referenced in WF1 documentation (Layer 1: Models & ENUMs)"
    ticket: "SCRSKY-254"
    target_date: "2025-05-15"
    files_to_modify:
      - "/Docs/Docs_1_AI_GUIDES/20-ENUM_HANDLING_GUIDE.md"
      - step_id: 6.1
        file: N/A for this specific flow
        action: No direct background job triggered by this specific flow
        principles:
          Bg Task Pattern: false
          Conn Mgmt: false
          Txn Boundary: false
          ORM Req: false
          Code Org: false
          Error Handling: false
        notes: "Staging Editor workflow processes these results later"
