- step: '**0. Primary Source Table Read**'
  workflows:
    WF1: '`place_searches` (Job Tracking) / _(Ext. API)_'
    WF2: '`places`'
    WF3: '`local_businesses`'
    WF4: '`domains`'
    WF5: '`sitemap_files`'
    WF6: '`sitemap_files`'
    WF7: '`pages`'
  principles: '**ORM Required, Connection Management**<br>**WHY:** Database operations
    must be standardized, secure, and maintain connection pooling<br>**HOW:** Use
    SQLAlchemy ORM exclusively with proper session handling and Supavisor connection
    parameters'
  docs:
  - '[01-ABSOLUTE_ORM_REQUIREMENT.md](../Docs_1_AI_GUIDES/01-ABSOLUTE_ORM_REQUIREMENT.md)'
  - '[07-DATABASE_CONNECTION_STANDARDS.md](../Docs_1_AI_GUIDES/07-DATABASE_CONNECTION_STANDARDS.md)'
- step: '**1. UI Interaction (JS)**'
  workflows:
    WF1: '`static/js/single-search-tab.js`'
    WF2: '`static/js/staging-editor-tab.js`'
    WF3: '`static/js/local-business-curation-tab.js`'
    WF4: '`static/js/domain-curation-tab.js`'
    WF5: '`static/js/sitemap-curation-tab.js`'
    WF6: _(N/A - Background Process)_
    WF7: '`static/js/page-curation-tab.js`'
  principles: '**API Standardization, Clear User Feedback**<br>**WHY:** UI must provide
    consistent experience and communicate clearly with backend API<br>**HOW:** Follow
    standard API naming conventions (/api/v3/), provide loading indicators and error
    handling'
  docs:
  - '[15-API_STANDARDIZATION_GUIDE.md](../Docs_1_AI_GUIDES/15-API_STANDARDIZATION_GUIDE.md)'
- step: '**1.1 HTML Tab Identifier**'
  workflows:
    WF1: '`singleSearch`'
    WF2: '`stagingEditor`'
    WF3: '`localBusinessCuration`'
    WF4: '`domainCurationPanel`'
    WF5: '`sitemapCurationPanel`'
    WF6: _(N/A - Background Process)_
    WF7: '`pageCurationPanel`'
  principles: '**Code Organization, UI Consistency**<br>**WHY:** Frontend components
    must follow consistent patterns for maintainability<br>**HOW:** Use standardized
    tab identifiers, consistent naming conventions, and structured HTML layout'
  docs:
  - '[17-CORE_ARCHITECTURAL_PRINCIPLES.md#8-code-organization](../Docs_1_AI_GUIDES/17-CORE_ARCHITECTURAL_PRINCIPLES.md#8-code-organization)'
- step: '**1.2 Tab JavaScript File**'
  workflows:
    WF1: '`static/js/single-search-tab.js`'
    WF2: '`static/js/staging-editor-tab.js`'
    WF3: '`static/js/local-business-curation-tab.js`'
    WF4: '`static/js/domain-curation-tab.js`'
    WF5: '`static/js/sitemap-curation-tab.js`'
    WF6: _(N/A - Background Process)_
    WF7: '`static/js/page-curation-tab.js`'
  principles: '**API Standardization, Code Organization**<br>**WHY:** JavaScript components
    must interact consistently with backend<br>**HOW:** Implement standardized API
    calls, consistent error handling, and follow the same AJAX patterns across tabs'
  docs:
  - '[15-API_STANDARDIZATION_GUIDE.md](../Docs_1_AI_GUIDES/15-API_STANDARDIZATION_GUIDE.md)'
  - '[17-CORE_ARCHITECTURAL_PRINCIPLES.md#8-code-organization](../Docs_1_AI_GUIDES/17-CORE_ARCHITECTURAL_PRINCIPLES.md#8-code-organization)'
- step: '**2. API Request Schema**'
  workflows:
    WF1: '`api_models::PlacesSearchRequest`'
    WF2: '`api_models::PlaceBatchStatusUpdateRequest`'
    WF3: '`api_models::LocalBusinessBatchStatusUpdateRequest`'
    WF4: '`api_models::DomainBatchCurationStatusUpdateRequest`'
    WF5: '`schemas/sitemap_file::SitemapFileBatchUpdate`'
    WF6: _(N/A - Triggered by WF5 DB state)_
    WF7: '`PageBatchStatusUpdateRequest`'
  principles: '**API Standardization, Enum Handling, Validation**<br>**WHY:** Input
    validation must be consistent and type-safe across all endpoints<br>**HOW:** Use
    Pydantic models for validation, explicit Enum types for status values, and consistent
    naming conventions'
  docs:
  - '[15-API_STANDARDIZATION_GUIDE.md](../Docs_1_AI_GUIDES/15-API_STANDARDIZATION_GUIDE.md)'
  - '[27-ENUM_HANDLING_STANDARDS.md](../Docs_1_AI_GUIDES/27-ENUM_HANDLING_STANDARDS.md)'
- step: '**3. API Router**'
  workflows:
    WF1: '`routers/google_maps_api.py`'
    WF2: '`routers/places_staging.py`'
    WF3: '`routers/local_businesses.py`'
    WF4: '`routers/domains.py`'
    WF5: '`routers/sitemap_files.py`'
    WF6: _(N/A - Background process)_
    WF7: '`routers/pages.py`'
  principles: '**Authentication Boundary, Transaction Boundaries, API Standardization**<br>**WHY:**
    Routers must enforce authentication, define clear API contracts, and manage transactions<br>**HOW:**
    Use FastAPI dependency injection for auth, begin/commit transactions, maintain
    consistent API structure with /api/v3/ prefix'
  docs:
  - '[11-AUTHENTICATION_BOUNDARY.md](../Docs_1_AI_GUIDES/11-AUTHENTICATION_BOUNDARY.md)'
  - '[13-TRANSACTION_MANAGEMENT_GUIDE.md](../Docs_1_AI_GUIDES/13-TRANSACTION_MANAGEMENT_GUIDE.md)'
  - '[15-API_STANDARDIZATION_GUIDE.md](../Docs_1_AI_GUIDES/15-API_STANDARDIZATION_GUIDE.md)'
- step: '**4. Core Logic Location**'
  workflows:
    WF1: Service (via background task)
    WF2: Router directly
    WF3: Router directly
    WF4: Router directly
    WF5: Delegated to service
    WF6: Background service
    WF7: '(To Be Decided: Router/Service)'
  principles: '**Code Organization, Transaction Boundaries**<br>**WHY:** Clear separation
    of concerns between routing and business logic maintains clean architecture<br>**HOW:**
    Simple updates handled in router, complex processing delegated to services; background
    tasks for long-running operations'
  docs:
  - '[17-CORE_ARCHITECTURAL_PRINCIPLES.md#8-code-organization](../Docs_1_AI_GUIDES/17-CORE_ARCHITECTURAL_PRINCIPLES.md#8-code-organization)'
  - '[13-TRANSACTION_MANAGEMENT_GUIDE.md](../Docs_1_AI_GUIDES/13-TRANSACTION_MANAGEMENT_GUIDE.md)'
- step: '**5. Core Logic Service**'
  workflows:
    WF1: '`services/places/places_search_service.py`'
    WF2: N/A (in Router)
    WF3: N/A (in Router)
    WF4: N/A (in Router)
    WF5: '`services/sitemap_files_service.py`'
    WF6: '`services/sitemap_import_service.py`'
    WF7: '`services/page_curation_service.py`'
  principles: '**ORM Required, Transaction Awareness, Error Handling**<br>**WHY:**
    Business logic must be maintainable, handle errors gracefully, and respect transaction
    boundaries<br>**HOW:** Services accept session parameters but don''t manage transactions,
    use ORM exclusively, implement comprehensive error handling'
  docs:
  - '[01-ABSOLUTE_ORM_REQUIREMENT.md](../Docs_1_AI_GUIDES/01-ABSOLUTE_ORM_REQUIREMENT.md)'
  - '[13-TRANSACTION_MANAGEMENT_GUIDE.md](../Docs_1_AI_GUIDES/13-TRANSACTION_MANAGEMENT_GUIDE.md)'
  - '[17-CORE_ARCHITECTURAL_PRINCIPLES.md#6-error-handling](../Docs_1_AI_GUIDES/17-CORE_ARCHITECTURAL_PRINCIPLES.md#6-error-handling)'
- step: '**6. Primary DB Model**'
  workflows:
    WF1: '`models/place_search.py::PlaceSearch`'
    WF2: '`models/place.py::Place`'
    WF3: '`models/local_business.py::LocalBusiness`'
    WF4: '`models/domain.py::Domain`'
    WF5: '`models/sitemap.py::SitemapFile`'
    WF6: '`models/sitemap.py::SitemapFile` (Input)'
    WF7: '`models/page.py::Page`'
  principles: '**ORM Required, UUID Standardization**<br>**WHY:** Database models
    must match schema exactly and follow consistent patterns<br>**HOW:** Implement
    SQLAlchemy models that mirror database tables, use UUID fields for IDs, implement
    proper relationships'
  docs:
  - '[01-ABSOLUTE_ORM_REQUIREMENT.md](../Docs_1_AI_GUIDES/01-ABSOLUTE_ORM_REQUIREMENT.md)'
  - '[16-UUID_STANDARDIZATION_GUIDE.md](../Docs_1_AI_GUIDES/16-UUID_STANDARDIZATION_GUIDE.md)'
  - '[25-SQLALCHEMY_MODEL_INTEGRITY_GUIDE.md](../Docs_1_AI_GUIDES/25-SQLALCHEMY_MODEL_INTEGRITY_GUIDE.md)'
- step: '**7. Primary Status Field**'
  workflows:
    WF1: '`status` (on `PlaceSearch`)'
    WF2: '`status`'
    WF3: '`status`'
    WF4: '`sitemap_curation_status`'
    WF5: '`deep_scrape_curation_status`'
    WF6: '`sitemap_import_status` (Input)'
    WF7: '`page_curation_status`'
  principles: '**Enum Handling, ORM Required**<br>**WHY:** Status fields drive workflow
    transitions and must be consistently managed<br>**HOW:** Define status fields
    with explicit enum types, validate all status values, ensure consistent naming
    (snake_case)'
  docs:
  - '[27-ENUM_HANDLING_STANDARDS.md](../Docs_1_AI_GUIDES/27-ENUM_HANDLING_STANDARDS.md)'
  - '[01-ABSOLUTE_ORM_REQUIREMENT.md](../Docs_1_AI_GUIDES/01-ABSOLUTE_ORM_REQUIREMENT.md)'
- step: '**8. Primary Status Enum**'
  workflows:
    WF1: '`PlaceSearchStatusEnum`'
    WF2: '`PlaceStatusEnum`'
    WF3: '`PlaceStatusEnum` (reused)'
    WF4: '`SitemapCurationStatusEnum`'
    WF5: '`SitemapDeepCurationStatusEnum`'
    WF6: '`SitemapImportStatusEnum`'
    WF7: '`PageCurationStatus`'
  principles: '**Enum Handling, Code Organization**<br>**WHY:** Status enums define
    the workflow state machine and must be consistently implemented<br>**HOW:** Define
    Python enums that map directly to database types, use consistent naming, include
    all required status values'
  docs:
  - '[27-ENUM_HANDLING_STANDARDS.md](../Docs_1_AI_GUIDES/27-ENUM_HANDLING_STANDARDS.md)'
  - '[17-CORE_ARCHITECTURAL_PRINCIPLES.md#8-code-organization](../Docs_1_AI_GUIDES/17-CORE_ARCHITECTURAL_PRINCIPLES.md#8-code-organization)'
- step: '**9. Queue Status Field**'
  workflows:
    WF1: '`status` (on `Place` model, Output)'
    WF2: '`deep_scan_status`'
    WF3: '`domain_extraction_status`'
    WF4: '`sitemap_analysis_status`'
    WF5: '`deep_scrape_process_status`'
    WF6: '`status` (on `Page` model, Output)'
    WF7: '`page_processing_status`'
  principles: '**Background Task Pattern, Enum Handling**<br>**WHY:** Queue status
    fields enable decoupled background processing through status-based triggers<br>**HOW:**
    Implement a separate status field for background processing that schedulers monitor,
    set to ''Queued'' to trigger processing'
  docs:
  - '[21-SCHEDULED_TASKS_APSCHEDULER_PATTERN.md](../Docs_1_AI_GUIDES/21-SCHEDULED_TASKS_APSCHEDULER_PATTERN.md)'
  - '[27-ENUM_HANDLING_STANDARDS.md](../Docs_1_AI_GUIDES/27-ENUM_HANDLING_STANDARDS.md)'
