"""Add deep_scan_status column and enum

Revision ID: 2b4db0bb95d0
Revises: cf984a13c57e
Create Date: 2025-04-02 20:16:12.107729

"""
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '2b4db0bb95d0'
down_revision: Union[str, None] = 'cf984a13c57e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('role_permissions')
    op.drop_table('jobs_backup')
    op.drop_index('idx_pages_domain_id', table_name='pages')
    op.drop_table('pages')
    op.drop_table('sitemap_files_backup')
    op.drop_table('places_staging_backup')
    op.drop_table('roles')
    op.drop_table('permissions')
    op.drop_table('user_tenants')
    op.drop_table('feature_votes')
    op.drop_table('features')
    op.drop_table('migration_logs')
    op.drop_index('idx_task_history_task_id', table_name='task_history')
    op.drop_index('idx_task_history_tenant_id', table_name='task_history')
    op.drop_table('task_history')
    op.drop_index('idx_task_analytics_task_id', table_name='task_analytics')
    op.drop_index('idx_task_analytics_tenant_id', table_name='task_analytics')
    op.drop_table('task_analytics')
    op.drop_table('tenant_features')
    op.drop_index('idx_user_roles_user_id', table_name='user_roles')
    op.drop_index('ix_user_roles_tenant_id', table_name='user_roles')
    op.drop_table('user_roles')
    op.drop_index('idx_tasks_domain_id', table_name='tasks')
    op.drop_index('idx_tasks_page_id', table_name='tasks')
    op.drop_table('tasks')
    op.alter_column('batch_jobs', 'batch_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.create_index(op.f('ix_batch_jobs_batch_id'), 'batch_jobs', ['batch_id'], unique=True)
    op.create_unique_constraint(None, 'batch_jobs', ['id_uuid'])
    op.drop_column('batch_jobs', 'batch_id_string')
    op.drop_column('batch_jobs', 'batch_id_original')
    op.alter_column('domains', 'title',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('domains', 'favicon_url',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('domains', 'logo_url',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('domains', 'language',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('domains', 'wordpress_version',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('domains', 'email_addresses',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.ARRAY(sa.String()),
               existing_nullable=True)
    op.alter_column('domains', 'phone_numbers',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.ARRAY(sa.String()),
               existing_nullable=True)
    op.alter_column('domains', 'facebook_url',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('domains', 'twitter_url',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('domains', 'linkedin_url',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('domains', 'instagram_url',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('domains', 'youtube_url',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('domains', 'last_scan',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_constraint('domains_domain_key', 'domains', type_='unique')
    op.drop_index('idx_domains_business_category', table_name='domains')
    op.drop_index('idx_domains_business_type', table_name='domains')
    op.drop_index('idx_domains_content_scrape_status', table_name='domains')
    op.drop_index('idx_domains_country_code', table_name='domains')
    op.drop_index('idx_domains_domain', table_name='domains')
    op.drop_index('idx_domains_has_ssl', table_name='domains')
    op.drop_index('idx_domains_hosting_provider', table_name='domains')
    op.drop_index('idx_domains_industry_vertical', table_name='domains')
    op.drop_index('idx_domains_page_scrape_status', table_name='domains')
    op.drop_index('idx_domains_sitemap_monitor_status', table_name='domains')
    op.drop_index('idx_domains_status', table_name='domains')
    op.drop_index('idx_domains_tenant_id', table_name='domains')
    op.drop_constraint('uq_domains_domain', 'domains', type_='unique')
    op.drop_index('ix_domains_domain', table_name='domains')
    op.create_index(op.f('ix_domains_domain'), 'domains', ['domain'], unique=True)
    op.create_foreign_key(None, 'domains', 'batch_jobs', ['batch_id'], ['batch_id'], ondelete='SET NULL')
    op.drop_column('domains', 'sitemap_monitor_at')
    op.drop_column('domains', 'agency_copyright_status_at')
    op.drop_column('domains', 'sitemap_url')
    op.drop_column('domains', 'content_scrape_at')
    op.drop_column('domains', 'elementor_version')
    op.drop_column('domains', 'country_code')
    op.drop_column('domains', 'average_response_time')
    op.drop_column('domains', 'lead_source')
    op.drop_column('domains', 'ssl_version')
    op.drop_column('domains', 'payment_methods')
    op.drop_column('domains', 'alert_threshold')
    op.drop_column('domains', 'last_successful_scan')
    op.drop_column('domains', 'agency_ad_performance_status')
    op.drop_column('domains', 'server_type')
    op.drop_column('domains', 'hosting_provider')
    op.drop_column('domains', 'error_history')
    op.drop_column('domains', 'has_divi')
    op.drop_column('domains', 'has_wpforms')
    op.drop_column('domains', 'last_modified')
    op.drop_column('domains', 'agency_wordpress_details')
    op.drop_column('domains', 'content_language')
    op.drop_column('domains', 'page_count')
    op.drop_column('domains', 'estimated_traffic')
    op.drop_column('domains', 'business_hours')
    op.drop_column('domains', 'error_count')
    op.drop_column('domains', 'has_woocommerce')
    op.drop_column('domains', 'sitemap_monitor_error')
    op.drop_column('domains', 'last_error')
    op.drop_column('domains', 'local_business_scraped_status')
    op.drop_column('domains', 'domain_metadata')
    op.drop_column('domains', 'page_scrape_status')
    op.drop_column('domains', 'hosting_location')
    op.drop_column('domains', 'content_scrape_status')
    op.drop_column('domains', 'uptime_percentage')
    op.drop_column('domains', 'agency_wordpress_details_at')
    op.drop_column('domains', 'agency_ad_performance_at')
    op.drop_column('domains', 'has_privacy_policy')
    op.drop_column('domains', 'copyright_year')
    op.drop_column('domains', 'has_sitemap')
    op.drop_column('domains', 'monitoring_status')
    op.drop_column('domains', 'feed_urls')
    op.drop_column('domains', 'competitor_group')
    op.drop_column('domains', 'has_contact_form7')
    op.drop_column('domains', 'ssl_expiry_date')
    op.drop_column('domains', 'agency_sitemap_analysis_done')
    op.drop_column('domains', 'total_images_count')
    op.drop_column('domains', 'has_cookie_notice')
    op.drop_column('domains', 'server_response_time')
    op.drop_column('domains', 'industry_vertical')
    op.drop_column('domains', 'agency_copyright_status')
    op.drop_column('domains', 'ip_address')
    op.drop_column('domains', 'dns_records')
    op.drop_column('domains', 'primary_language')
    op.drop_column('domains', 'security_headers')
    op.drop_column('domains', 'business_category')
    op.drop_column('domains', 'agency_sitemap_analysis_done_at')
    op.drop_column('domains', 'page_scrape_error')
    op.drop_column('domains', 'first_scan')
    op.drop_column('domains', 'page_scrape_at')
    op.drop_column('domains', 'google_tag_manager_id')
    op.drop_column('domains', 'robots_txt')
    op.drop_column('domains', 'average_page_size')
    op.drop_column('domains', 'sitemap_monitor_status')
    op.drop_column('domains', 'physical_addresses')
    op.drop_column('domains', 'business_type')
    op.drop_column('domains', 'performance_metrics')
    op.drop_column('domains', 'ssl_issuer')
    op.drop_column('domains', 'has_ssl')
    op.drop_column('domains', 'content_scrape_error')
    op.drop_column('domains', 'wordpress_theme')
    op.drop_column('domains', 'cdn_provider')
    op.drop_column('domains', 'local_business_scraped_at')
    op.drop_column('domains', 'is_active')
    op.drop_column('domains', 'google_analytics_id')
    op.drop_column('domains', 'crawler_hints')
    op.drop_column('domains', 'has_yoast_seo')
    op.drop_column('domains', 'has_ecommerce')
    op.drop_column('domains', 'market_segment')
    op.add_column('feature_flags', sa.Column('is_enabled', sa.Boolean(), nullable=False))
    op.alter_column('feature_flags', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('feature_flags', 'description',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('feature_flags', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('feature_flags', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint('feature_flags_name_key', 'feature_flags', type_='unique')
    op.create_index(op.f('ix_feature_flags_name'), 'feature_flags', ['name'], unique=True)
    op.drop_column('feature_flags', 'default_enabled')
    op.drop_index('idx_jobs_tenant_id', table_name='jobs')
    op.create_foreign_key(None, 'jobs', 'batch_jobs', ['batch_id'], ['batch_id'], ondelete='SET NULL')
    op.drop_column('jobs', 'completed_at')
    op.drop_column('jobs', 'metadata')
    op.drop_column('jobs', 'batch_id_string')
    op.drop_column('jobs', 'started_at')
    op.drop_column('jobs', 'id_uuid')
    op.drop_column('jobs', 'result')
    op.alter_column('local_businesses', 'place_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_index('idx_local_businesses_tenant_id', table_name='local_businesses')
    op.drop_constraint('local_businesses_place_id_key', 'local_businesses', type_='unique')
    op.drop_index('ix_local_businesses_place_id', table_name='local_businesses')
    op.create_index(op.f('ix_local_businesses_place_id'), 'local_businesses', ['place_id'], unique=True)
    op.create_index(op.f('ix_local_businesses_business_name'), 'local_businesses', ['business_name'], unique=False)
    op.create_index(op.f('ix_local_businesses_city'), 'local_businesses', ['city'], unique=False)
    op.create_index(op.f('ix_local_businesses_state'), 'local_businesses', ['state'], unique=False)
    op.create_index(op.f('ix_local_businesses_tenant_id'), 'local_businesses', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_local_businesses_zip'), 'local_businesses', ['zip'], unique=False)
    op.alter_column('place_searches', 'params',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.create_index(op.f('ix_place_searches_tenant_id'), 'place_searches', ['tenant_id'], unique=False)
    op.alter_column('places_staging', 'place_id',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('places_staging', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('places_staging', 'formatted_address',
               existing_type=sa.TEXT(),
               type_=sa.String(length=512),
               existing_nullable=True)
    op.alter_column('places_staging', 'business_type',
               existing_type=sa.TEXT(),
               type_=sa.String(length=100),
               existing_nullable=True)
    op.alter_column('places_staging', 'vicinity',
               existing_type=sa.TEXT(),
               type_=sa.String(length=512),
               existing_nullable=True)
    op.alter_column('places_staging', 'tenant_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('places_staging', 'created_by',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('places_staging', 'user_name',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.alter_column('places_staging', 'search_query',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.alter_column('places_staging', 'search_location',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.alter_column('places_staging', 'search_time',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('places_staging', 'tags',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=postgresql.ARRAY(sa.String()),
               existing_nullable=True)
    op.alter_column('places_staging', 'revisit_date',
               existing_type=sa.DATE(),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('places_staging', 'processed_time',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('places_staging', 'updated_by',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.alter_column('places_staging', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index('idx_places_staging_status', table_name='places_staging')
    op.drop_index('idx_places_staging_tenant', table_name='places_staging')
    op.drop_constraint('places_staging_place_id_key', 'places_staging', type_='unique')
    op.create_index(op.f('ix_places_staging_deep_scan_status'), 'places_staging', ['deep_scan_status'], unique=False)
    op.create_index(op.f('ix_places_staging_place_id'), 'places_staging', ['place_id'], unique=True)
    op.create_index(op.f('ix_places_staging_tenant_id'), 'places_staging', ['tenant_id'], unique=False)
    op.create_foreign_key(None, 'places_staging', 'jobs', ['search_job_id'], ['id'])
    op.alter_column('profiles', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('profiles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index('idx_profiles_tenant_id', table_name='profiles')
    op.drop_constraint('fk_profiles_tenant', 'profiles', type_='foreignkey')
    op.drop_constraint('profiles_id_fkey', 'profiles', type_='foreignkey')
    op.drop_constraint('profiles_role_id_fkey', 'profiles', type_='foreignkey')
    op.drop_column('profiles', 'role_id')
    op.drop_constraint('sidebar_features_requires_feature_fkey', 'sidebar_features', type_='foreignkey')
    op.create_foreign_key(None, 'sidebar_features', 'tenants', ['tenant_id'], ['id'], ondelete='SET NULL')
    op.drop_column('sidebar_features', 'minimum_role_id')
    op.alter_column('sitemap_files', 'sitemap_type',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=True)
    op.alter_column('sitemap_files', 'discovery_method',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('sitemap_files', 'last_modified',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('sitemap_files', 'url_count',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Number of URLs found in this sitemap file',
               existing_nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('sitemap_files', 'tenant_id',
               existing_type=sa.UUID(),
               nullable=False,
               existing_server_default=sa.text("'550e8400-e29b-41d4-a716-446655440000'::uuid"))
    op.alter_column('sitemap_files', 'status',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=True,
               existing_server_default=sa.text("'new'::text"))
    op.alter_column('sitemap_files', 'tags',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('sitemap_files', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('sitemap_files', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index('idx_sitemap_files_status', table_name='sitemap_files')
    op.drop_index('idx_sitemap_files_tenant_domain', table_name='sitemap_files')
    op.create_index(op.f('ix_sitemap_files_domain_id'), 'sitemap_files', ['domain_id'], unique=False)
    op.create_index(op.f('ix_sitemap_files_job_id'), 'sitemap_files', ['job_id'], unique=False)
    op.create_index(op.f('ix_sitemap_files_tenant_id'), 'sitemap_files', ['tenant_id'], unique=False)
    op.drop_constraint('sitemap_files_user_id_fkey', 'sitemap_files', type_='foreignkey')
    op.drop_constraint('sitemap_files_domain_id_fkey', 'sitemap_files', type_='foreignkey')
    op.drop_constraint('sitemap_files_updated_by_fkey', 'sitemap_files', type_='foreignkey')
    op.drop_constraint('sitemap_files_created_by_fkey', 'sitemap_files', type_='foreignkey')
    op.drop_column('sitemap_files', 'lead_source')
    op.drop_column('sitemap_files', 'user_name')
    op.drop_column('sitemap_files', 'status_code')
    op.drop_column('sitemap_files', 'process_after')
    op.drop_column('sitemap_files', 'last_processed_at')
    op.drop_column('sitemap_files', 'priority')
    op.drop_column('sitemap_files', 'error_message')
    op.drop_column('sitemap_files', 'is_gzipped')
    op.drop_column('sitemap_files', 'user_id')
    op.drop_column('sitemap_files', 'generator')
    op.drop_column('sitemap_files', 'response_time_ms')
    op.drop_column('sitemap_files', 'is_active')
    op.drop_column('sitemap_files', 'updated_by')
    op.alter_column('sitemap_urls', 'lastmod',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('sitemap_urls', 'changefreq',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('sitemap_urls', 'priority',
               existing_type=sa.INTEGER(),
               type_=sa.Float(),
               existing_nullable=True,
               existing_server_default=sa.text('5'))
    op.alter_column('sitemap_urls', 'tenant_id',
               existing_type=sa.UUID(),
               nullable=False,
               existing_server_default=sa.text("'550e8400-e29b-41d4-a716-446655440000'::uuid"))
    op.alter_column('sitemap_urls', 'tags',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('sitemap_urls', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('sitemap_urls', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index('idx_sitemap_urls_sitemap_id', table_name='sitemap_urls')
    op.drop_index('idx_sitemap_urls_status', table_name='sitemap_urls')
    op.drop_index('idx_sitemap_urls_tenant_domain', table_name='sitemap_urls')
    op.create_index(op.f('ix_sitemap_urls_sitemap_id'), 'sitemap_urls', ['sitemap_id'], unique=False)
    op.create_index(op.f('ix_sitemap_urls_tenant_id'), 'sitemap_urls', ['tenant_id'], unique=False)
    op.drop_constraint('sitemap_urls_domain_id_fkey', 'sitemap_urls', type_='foreignkey')
    op.drop_constraint('sitemap_urls_updated_by_fkey', 'sitemap_urls', type_='foreignkey')
    op.drop_constraint('sitemap_urls_created_by_fkey', 'sitemap_urls', type_='foreignkey')
    op.drop_constraint('sitemap_urls_user_id_fkey', 'sitemap_urls', type_='foreignkey')
    op.drop_column('sitemap_urls', 'last_checked_at')
    op.drop_column('sitemap_urls', 'priority_value')
    op.drop_column('sitemap_urls', 'updated_by')
    op.drop_column('sitemap_urls', 'video_count')
    op.drop_column('sitemap_urls', 'lead_source')
    op.drop_column('sitemap_urls', 'status')
    op.drop_column('sitemap_urls', 'process_after')
    op.drop_column('sitemap_urls', 'discovered_at')
    op.drop_column('sitemap_urls', 'error_message')
    op.drop_column('sitemap_urls', 'user_id')
    op.drop_column('sitemap_urls', 'size_bytes')
    op.drop_column('sitemap_urls', 'user_name')
    op.drop_column('sitemap_urls', 'loc_text')
    op.drop_column('sitemap_urls', 'image_count')
    op.drop_column('sitemap_urls', 'is_active')
    op.drop_column('sitemap_urls', 'page_type')
    op.drop_column('sitemap_urls', 'status_code')
    op.drop_column('sitemap_urls', 'domain_id')
    op.drop_column('sitemap_urls', 'news_count')
    op.alter_column('tenants', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('tenants', 'description',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_column('tenants', 'is_active')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('tenants', sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False))
    op.alter_column('tenants', 'description',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('tenants', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.add_column('sitemap_urls', sa.Column('news_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('sitemap_urls', sa.Column('domain_id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('sitemap_urls', sa.Column('status_code', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('sitemap_urls', sa.Column('page_type', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('sitemap_urls', sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
    op.add_column('sitemap_urls', sa.Column('image_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('sitemap_urls', sa.Column('loc_text', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('sitemap_urls', sa.Column('user_name', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('sitemap_urls', sa.Column('size_bytes', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('sitemap_urls', sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('sitemap_urls', sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('sitemap_urls', sa.Column('discovered_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.add_column('sitemap_urls', sa.Column('process_after', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('sitemap_urls', sa.Column('status', sa.TEXT(), server_default=sa.text("'new'::text"), autoincrement=False, nullable=False))
    op.add_column('sitemap_urls', sa.Column('lead_source', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('sitemap_urls', sa.Column('video_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('sitemap_urls', sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('sitemap_urls', sa.Column('priority_value', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True))
    op.add_column('sitemap_urls', sa.Column('last_checked_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.create_foreign_key('sitemap_urls_user_id_fkey', 'sitemap_urls', 'users', ['user_id'], ['id'], referent_schema='auth')
    op.create_foreign_key('sitemap_urls_created_by_fkey', 'sitemap_urls', 'users', ['created_by'], ['id'], referent_schema='auth')
    op.create_foreign_key('sitemap_urls_updated_by_fkey', 'sitemap_urls', 'users', ['updated_by'], ['id'], referent_schema='auth')
    op.create_foreign_key('sitemap_urls_domain_id_fkey', 'sitemap_urls', 'domains', ['domain_id'], ['id'])
    op.drop_index(op.f('ix_sitemap_urls_tenant_id'), table_name='sitemap_urls')
    op.drop_index(op.f('ix_sitemap_urls_sitemap_id'), table_name='sitemap_urls')
    op.create_index('idx_sitemap_urls_tenant_domain', 'sitemap_urls', ['tenant_id', 'domain_id'], unique=False)
    op.create_index('idx_sitemap_urls_status', 'sitemap_urls', ['status'], unique=False)
    op.create_index('idx_sitemap_urls_sitemap_id', 'sitemap_urls', ['sitemap_id'], unique=False)
    op.alter_column('sitemap_urls', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('sitemap_urls', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('sitemap_urls', 'tags',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('sitemap_urls', 'tenant_id',
               existing_type=sa.UUID(),
               nullable=True,
               existing_server_default=sa.text("'550e8400-e29b-41d4-a716-446655440000'::uuid"))
    op.alter_column('sitemap_urls', 'priority',
               existing_type=sa.Float(),
               type_=sa.INTEGER(),
               existing_nullable=True,
               existing_server_default=sa.text('5'))
    op.alter_column('sitemap_urls', 'changefreq',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('sitemap_urls', 'lastmod',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.add_column('sitemap_files', sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('sitemap_files', sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
    op.add_column('sitemap_files', sa.Column('response_time_ms', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('sitemap_files', sa.Column('generator', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('sitemap_files', sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('sitemap_files', sa.Column('is_gzipped', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('sitemap_files', sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('sitemap_files', sa.Column('priority', sa.INTEGER(), server_default=sa.text('5'), autoincrement=False, nullable=True))
    op.add_column('sitemap_files', sa.Column('last_processed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('sitemap_files', sa.Column('process_after', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('sitemap_files', sa.Column('status_code', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('sitemap_files', sa.Column('user_name', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('sitemap_files', sa.Column('lead_source', sa.TEXT(), autoincrement=False, nullable=True))
    op.create_foreign_key('sitemap_files_created_by_fkey', 'sitemap_files', 'users', ['created_by'], ['id'], referent_schema='auth')
    op.create_foreign_key('sitemap_files_updated_by_fkey', 'sitemap_files', 'users', ['updated_by'], ['id'], referent_schema='auth')
    op.create_foreign_key('sitemap_files_domain_id_fkey', 'sitemap_files', 'domains', ['domain_id'], ['id'])
    op.create_foreign_key('sitemap_files_user_id_fkey', 'sitemap_files', 'users', ['user_id'], ['id'], referent_schema='auth')
    op.drop_index(op.f('ix_sitemap_files_tenant_id'), table_name='sitemap_files')
    op.drop_index(op.f('ix_sitemap_files_job_id'), table_name='sitemap_files')
    op.drop_index(op.f('ix_sitemap_files_domain_id'), table_name='sitemap_files')
    op.create_index('idx_sitemap_files_tenant_domain', 'sitemap_files', ['tenant_id', 'domain_id'], unique=False)
    op.create_index('idx_sitemap_files_status', 'sitemap_files', ['status'], unique=False)
    op.alter_column('sitemap_files', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('sitemap_files', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('sitemap_files', 'tags',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('sitemap_files', 'status',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=False,
               existing_server_default=sa.text("'new'::text"))
    op.alter_column('sitemap_files', 'tenant_id',
               existing_type=sa.UUID(),
               nullable=True,
               existing_server_default=sa.text("'550e8400-e29b-41d4-a716-446655440000'::uuid"))
    op.alter_column('sitemap_files', 'url_count',
               existing_type=sa.INTEGER(),
               comment='Number of URLs found in this sitemap file',
               existing_nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('sitemap_files', 'last_modified',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('sitemap_files', 'discovery_method',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('sitemap_files', 'sitemap_type',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=False)
    op.add_column('sidebar_features', sa.Column('minimum_role_id', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'sidebar_features', type_='foreignkey')
    op.create_foreign_key('sidebar_features_requires_feature_fkey', 'sidebar_features', 'feature_flags', ['requires_feature'], ['id'], ondelete='CASCADE')
    op.add_column('profiles', sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key('profiles_role_id_fkey', 'profiles', 'roles', ['role_id'], ['id'])
    op.create_foreign_key('profiles_id_fkey', 'profiles', 'users', ['id'], ['id'], referent_schema='auth', ondelete='CASCADE')
    op.create_foreign_key('fk_profiles_tenant', 'profiles', 'tenants', ['tenant_id'], ['id'], ondelete='CASCADE')
    op.create_index('idx_profiles_tenant_id', 'profiles', ['tenant_id'], unique=False)
    op.alter_column('profiles', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('profiles', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(None, 'places_staging', type_='foreignkey')
    op.drop_index(op.f('ix_places_staging_tenant_id'), table_name='places_staging')
    op.drop_index(op.f('ix_places_staging_place_id'), table_name='places_staging')
    op.drop_index(op.f('ix_places_staging_deep_scan_status'), table_name='places_staging')
    op.create_unique_constraint('places_staging_place_id_key', 'places_staging', ['place_id'])
    op.create_index('idx_places_staging_tenant', 'places_staging', ['tenant_id'], unique=False)
    op.create_index('idx_places_staging_status', 'places_staging', ['status'], unique=False)
    op.alter_column('places_staging', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('places_staging', 'updated_by',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('places_staging', 'processed_time',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('places_staging', 'revisit_date',
               existing_type=sa.DateTime(),
               type_=sa.DATE(),
               existing_nullable=True)
    op.alter_column('places_staging', 'tags',
               existing_type=postgresql.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('places_staging', 'search_time',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('places_staging', 'search_location',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('places_staging', 'search_query',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('places_staging', 'user_name',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('places_staging', 'created_by',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('places_staging', 'tenant_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('places_staging', 'vicinity',
               existing_type=sa.String(length=512),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('places_staging', 'business_type',
               existing_type=sa.String(length=100),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('places_staging', 'formatted_address',
               existing_type=sa.String(length=512),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('places_staging', 'name',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('places_staging', 'place_id',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_index(op.f('ix_place_searches_tenant_id'), table_name='place_searches')
    op.alter_column('place_searches', 'params',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.drop_index(op.f('ix_local_businesses_zip'), table_name='local_businesses')
    op.drop_index(op.f('ix_local_businesses_tenant_id'), table_name='local_businesses')
    op.drop_index(op.f('ix_local_businesses_state'), table_name='local_businesses')
    op.drop_index(op.f('ix_local_businesses_city'), table_name='local_businesses')
    op.drop_index(op.f('ix_local_businesses_business_name'), table_name='local_businesses')
    op.drop_index(op.f('ix_local_businesses_place_id'), table_name='local_businesses')
    op.create_index('ix_local_businesses_place_id', 'local_businesses', ['place_id'], unique=False)
    op.create_unique_constraint('local_businesses_place_id_key', 'local_businesses', ['place_id'])
    op.create_index('idx_local_businesses_tenant_id', 'local_businesses', ['tenant_id'], unique=False)
    op.alter_column('local_businesses', 'place_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.add_column('jobs', sa.Column('result', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('jobs', sa.Column('id_uuid', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('jobs', sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('jobs', sa.Column('batch_id_string', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('jobs', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('jobs', sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'jobs', type_='foreignkey')
    op.create_index('idx_jobs_tenant_id', 'jobs', ['tenant_id'], unique=False)
    op.add_column('feature_flags', sa.Column('default_enabled', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_feature_flags_name'), table_name='feature_flags')
    op.create_unique_constraint('feature_flags_name_key', 'feature_flags', ['name'])
    op.alter_column('feature_flags', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('feature_flags', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('feature_flags', 'description',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('feature_flags', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('feature_flags', 'is_enabled')
    op.add_column('domains', sa.Column('market_segment', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('has_ecommerce', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('has_yoast_seo', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('crawler_hints', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('google_analytics_id', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('local_business_scraped_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('cdn_provider', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('wordpress_theme', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('content_scrape_error', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('has_ssl', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('ssl_issuer', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('performance_metrics', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('business_type', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('physical_addresses', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('sitemap_monitor_status', postgresql.ENUM('queued', 'in_progress', 'complete', 'error', 'manual_review', 'cancelled', 'paused', name='task_status'), server_default=sa.text("'queued'::task_status"), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('average_page_size', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('robots_txt', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('google_tag_manager_id', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('page_scrape_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('first_scan', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('domains', sa.Column('page_scrape_error', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('agency_sitemap_analysis_done_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('business_category', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('security_headers', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('primary_language', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('dns_records', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('ip_address', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('agency_copyright_status', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('industry_vertical', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('server_response_time', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('has_cookie_notice', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('total_images_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('agency_sitemap_analysis_done', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('ssl_expiry_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('has_contact_form7', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('competitor_group', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('feed_urls', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('monitoring_status', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('has_sitemap', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('copyright_year', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('has_privacy_policy', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('agency_ad_performance_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('agency_wordpress_details_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('uptime_percentage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('content_scrape_status', postgresql.ENUM('queued', 'in_progress', 'complete', 'error', 'manual_review', 'cancelled', 'paused', name='task_status'), server_default=sa.text("'queued'::task_status"), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('hosting_location', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('page_scrape_status', postgresql.ENUM('queued', 'in_progress', 'complete', 'error', 'manual_review', 'cancelled', 'paused', name='task_status'), server_default=sa.text("'queued'::task_status"), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('domain_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('local_business_scraped_status', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('last_error', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('sitemap_monitor_error', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('has_woocommerce', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('error_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('business_hours', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('estimated_traffic', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('page_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('content_language', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('agency_wordpress_details', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('last_modified', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('has_wpforms', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('has_divi', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('error_history', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('hosting_provider', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('server_type', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('agency_ad_performance_status', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('last_successful_scan', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('alert_threshold', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('payment_methods', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('ssl_version', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('lead_source', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('average_response_time', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('country_code', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('elementor_version', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('content_scrape_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('sitemap_url', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('agency_copyright_status_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('domains', sa.Column('sitemap_monitor_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'domains', type_='foreignkey')
    op.drop_index(op.f('ix_domains_domain'), table_name='domains')
    op.create_index('ix_domains_domain', 'domains', ['domain'], unique=False)
    op.create_unique_constraint('uq_domains_domain', 'domains', ['domain'])
    op.create_index('idx_domains_tenant_id', 'domains', ['tenant_id'], unique=False)
    op.create_index('idx_domains_status', 'domains', ['status'], unique=False)
    op.create_index('idx_domains_sitemap_monitor_status', 'domains', ['sitemap_monitor_status'], unique=False)
    op.create_index('idx_domains_page_scrape_status', 'domains', ['page_scrape_status'], unique=False)
    op.create_index('idx_domains_industry_vertical', 'domains', ['industry_vertical'], unique=False)
    op.create_index('idx_domains_hosting_provider', 'domains', ['hosting_provider'], unique=False)
    op.create_index('idx_domains_has_ssl', 'domains', ['has_ssl'], unique=False)
    op.create_index('idx_domains_domain', 'domains', ['domain'], unique=False)
    op.create_index('idx_domains_country_code', 'domains', ['country_code'], unique=False)
    op.create_index('idx_domains_content_scrape_status', 'domains', ['content_scrape_status'], unique=False)
    op.create_index('idx_domains_business_type', 'domains', ['business_type'], unique=False)
    op.create_index('idx_domains_business_category', 'domains', ['business_category'], unique=False)
    op.create_unique_constraint('domains_domain_key', 'domains', ['domain'])
    op.alter_column('domains', 'last_scan',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('domains', 'youtube_url',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('domains', 'instagram_url',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('domains', 'linkedin_url',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('domains', 'twitter_url',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('domains', 'facebook_url',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('domains', 'phone_numbers',
               existing_type=sa.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('domains', 'email_addresses',
               existing_type=sa.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('domains', 'wordpress_version',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('domains', 'language',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('domains', 'logo_url',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('domains', 'favicon_url',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('domains', 'title',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.add_column('batch_jobs', sa.Column('batch_id_original', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('batch_jobs', sa.Column('batch_id_string', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'batch_jobs', type_='unique')
    op.drop_index(op.f('ix_batch_jobs_batch_id'), table_name='batch_jobs')
    op.alter_column('batch_jobs', 'batch_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.create_table('tasks',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'pending'::text"), autoincrement=False, nullable=False),
    sa.Column('priority', sa.TEXT(), server_default=sa.text("'medium'::text"), autoincrement=False, nullable=False),
    sa.Column('assigned_to', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('assigned_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('due_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('task_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('domain_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('page_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('meta_json', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['domain_id'], ['domains.id'], name='tasks_domain_id_fkey'),
    sa.ForeignKeyConstraint(['page_id'], ['pages.id'], name='tasks_page_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='tasks_pkey')
    )
    op.create_index('idx_tasks_page_id', 'tasks', ['page_id'], unique=False)
    op.create_index('idx_tasks_domain_id', 'tasks', ['domain_id'], unique=False)
    op.create_table('user_roles',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name='user_roles_role_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='fk_user_roles_tenant_id', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['profiles.id'], name='fk_user_roles_profile', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='user_roles_pkey'),
    sa.UniqueConstraint('user_id', 'role_id', name='user_roles_user_id_role_id_key')
    )
    op.create_index('ix_user_roles_tenant_id', 'user_roles', ['tenant_id'], unique=False)
    op.create_index('idx_user_roles_user_id', 'user_roles', ['user_id'], unique=False)
    op.create_table('tenant_features',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('feature_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('is_enabled', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['feature_id'], ['feature_flags.id'], name='tenant_features_feature_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='tenant_features_tenant_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='tenant_features_pkey'),
    sa.UniqueConstraint('tenant_id', 'feature_id', name='tenant_features_tenant_id_feature_id_key')
    )
    op.create_table('task_analytics',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('task_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('time_in_status', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('completion_time', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('agent_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('performance_score', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('meta_json', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='task_analytics_pkey')
    )
    op.create_index('idx_task_analytics_tenant_id', 'task_analytics', ['tenant_id'], unique=False)
    op.create_index('idx_task_analytics_task_id', 'task_analytics', ['task_id'], unique=False)
    op.create_table('task_history',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('task_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('changed_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('previous_status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('new_status', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('previous_assigned_to', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('new_assigned_to', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('change_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='task_history_pkey')
    )
    op.create_index('idx_task_history_tenant_id', 'task_history', ['tenant_id'], unique=False)
    op.create_index('idx_task_history_task_id', 'task_history', ['task_id'], unique=False)
    op.create_table('migration_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('migration_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('log_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='migration_logs_pkey')
    )
    op.create_table('features',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('priority', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'new'::text"), autoincrement=False, nullable=False),
    sa.Column('requested_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('reviewed_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('votes', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('page_path', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('page_tab', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['requested_by'], ['auth.users.id'], name='features_requested_by_fkey'),
    sa.ForeignKeyConstraint(['reviewed_by'], ['auth.users.id'], name='features_reviewed_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='features_pkey')
    )
    op.create_table('feature_votes',
    sa.Column('feature_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], name='feature_votes_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('feature_id', 'user_id', name='feature_votes_pkey')
    )
    op.create_table('user_tenants',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], name='user_tenants_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'tenant_id', name='user_tenants_pkey')
    )
    op.create_table('permissions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='permissions_pkey'),
    sa.UniqueConstraint('name', name='permissions_name_key'),
    sa.UniqueConstraint('name', name='unique_permission_name'),
    postgresql_ignore_search_path=False
    )
    op.create_table('roles',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('roles_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='fk_roles_tenant_id_tenants', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='roles_pkey'),
    sa.UniqueConstraint('name', 'tenant_id', name='uq_role_name_tenant'),
    postgresql_ignore_search_path=False
    )
    op.create_table('places_staging_backup',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('place_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('formatted_address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('business_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('latitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('longitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('vicinity', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('rating', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('user_ratings_total', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('price_level', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('tenant_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('search_job_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('search_query', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('search_location', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('search_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('priority', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('revisit_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('processed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('processed_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('raw_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('user_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True)
    )
    op.create_table('sitemap_files_backup',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('domain_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('sitemap_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('discovery_method', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('page_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('size_bytes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('response_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('priority', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status_code', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('last_modified', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_gzipped', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('has_lastmod', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('has_priority', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('has_changefreq', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('generator', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('lead_source', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('user_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('process_after', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_processed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('job_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('url_count', sa.INTEGER(), autoincrement=False, nullable=True)
    )
    op.create_table('pages',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('domain_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('h1', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('canonical_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('meta_robots', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('has_schema_markup', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('schema_types', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('has_contact_form', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('has_comments', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('word_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('inbound_links', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('outbound_links', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('last_modified', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_scan', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('page_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('lead_source', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('additional_json', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['domain_id'], ['domains.id'], name='pages_domain_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='pages_pkey')
    )
    op.create_index('idx_pages_domain_id', 'pages', ['domain_id'], unique=False)
    op.create_table('jobs_backup',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('job_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('tenant_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('job_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('progress', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('error', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('result', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('domain_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('result_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('job_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('tenant_id_uuid', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('id_uuid', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('batch_id', sa.VARCHAR(), autoincrement=False, nullable=True)
    )
    op.create_table('role_permissions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('permission_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], name='role_permissions_permission_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name='role_permissions_role_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='role_permissions_pkey'),
    sa.UniqueConstraint('role_id', 'permission_id', name='role_permissions_role_id_permission_id_key')
    )
    # ### end Alembic commands ###
